{% extends "base.amber.in.jinja" %}
{% block body %}
imin = 0  ! Perform MD
dt = {{ timestep_ps }}  ! Timestep [ps], equal to {{ timestep_ps * 1000 }} [fs]
nstlim = {{ total_md_steps }}  ! Total MD step num
{% block md_body %}
{% endblock md_body %}
{% if thermo %}
temp0 = {{ thermo.temperature_kelvin[0] }}  ! Target temperature for thermo [K]
    {% if thermo.name == "berendsen" %}
ntt = 1 ! Berendsen (AKA Weak coupling) thermostat
tautp = {{ thermo.temperature_relax_time_ps }}  ! Berendsen thermo T relax time [ps]
    {% elif thermo.name == "andersen" %}
ntt = 2  ! Andersen thermostat
vrand = {{ thermo.vel_randomization_step_interval }}  ! Andersen thermo v randomization step interval
    {% elif thermo.name == "langevin" %}
ntt = 3  ! Langevin thermostat
gamma_ln = {{ thermo.friction_inv_ps }}  ! Langevin thermo friction [1/ps]
    {% elif thermo.name == "oinh" %}
ntt = 9  ! Optimized Isokinetic Nose-Hoover thermostat (AKA OINH)
gamma_ln = {{ thermo.friction_inv_ps }}  ! OINH friction [1/ps]
nikja = {{ thermo.sub }}  ! OINH number of substeps
idistr = {{ thermo.vel_distribution_accumulation_step_interval }}  ! OINH v distrib. accum. step interval
    {% elif thermo.name == "sinh" %}
ntt = 10  ! Stochastic Isokinetic Nose-Hoover thermostat (AKA SINH)
nikja = {{ thermo.additional_dof_num }}  ! SINH number of additional DoF
sinrtau = {{ thermo.dof_mass }}  ! SINH mass of additional DoF
    {% elif thermo.name == "bussi" %}
ntt = 11 ! Bussi (AKA Stochastic Berendsen) thermostat
tautp = {{ thermo.temperature_relax_time_ps }}  ! Bussi thermo T relax time [ps]
    {% endif %}
{% endif %}
{% if baro %}
pres0 = {{ baro.pressure_bar[0] }}  ! Target pressure for baro [bar]
    {% if baro.scaling.value == "isotropic" %}
ntp = 1  ! Isotropic baro scaling
    {% else %}
ntp = 2  ! Anisotropic baro scaling
    {% endif %}
    {% if baro.scaling.value == "anisotropic-random" %}
baroscalingdir = 0  ! Baro anisotropic scaling dir: Random each time, between X Y Z
    {% elif baro.scaling.value == "anisotropic-x" %}
baroscalingdir = 1  ! Baro anisotropic scaling dir: X
    {% elif baro.scaling.value == "anisotropic-y" %}
baroscalingdir = 2  ! Baro anisotropic scaling dir: Y
    {% elif baro.scaling.value == "anisotropic-z" %}
baroscalingdir = 3  ! Baro anisotropic scaling dir: Z
    {% endif %}
    {% if baro.name == "bbaro" %}
barostat = 1  ! Berendsen barostat
comp = {{ baro.compressibility_inv_megabar }}  ! Berendsen baro compressibility [1/Mbar]
taup = {{ baro.pressure_relax_time_ps }}  ! Berendsen baro pressure relax time [ps]
    {% elif baro.name == "mcbaro" %}
barostat = 2  ! Monte Carlo barostat
mcbarint = {{ baro.attempts_step_interval }}  ! MC baro attempts step interval
    {% endif %}
{% endif %}
{% if surface_tensionstat %}
csurften = {{ surface_tensionstat.plane.value }}  ! Plane for surftensionstat interfaces (1=YZ, 2=XZ, 3=XY)
gamma_ten = {{ surface_tensionstat.tension_dyne_per_cm }}  ! Target surface tension for surftensionstat [dyne/cm]
ninterface = {{ surface_tensionstat.interface_num }} ! Num. interfaces for surftensionstat
{% endif %}
{% if shake %}
ntc = 2  ! Apply SHAKE to bonds involving H
ntf = 2  ! Apply SHAKE to bonds involving H
{% else %}
ntc = 1  ! Don't apply SHAKE to any bonds
ntf = 1  ! Don't apply SHAKE to any bonds
{% endif %}
{% if restart %}
irest = 1  ! Restart
ntx = 5  ! Restart
{% else %}
{% if temperature_init_kelvin %}
tempi = {{ temperature_init_kelvin }}
{% endif %}
irest = 0  ! Not a restart
ntx = 1  ! Not a restart
{% endif %}
{% if heating and umbrella_input_fpath %}
nmropt = 1  ! Changing scalars and applying harmonic restraints
{% elif heating %}
nmropt = 1  ! Changing scalars
{% elif umbrella_input_fpath %}
nmropt = 1  ! Applying harmonic restraints
{% else %}
nmropt = 0  ! Not changing scalars, and not applying harmonic restraints
{% endif %}
{% endblock body %}

{% block heating %}
{% if heating %}
&wt
TYPE = 'TEMP0'  ! Change temperature throughout MD
ISTEP1 = 0  ! Start temperature change at the start of MD
ISTEP2 = {{ total_md_steps}}  ! Stop temperature change at the end of MD
VALUE1 = {{ thermo.temperature_kelvin[0] }}  ! Starting temperature [K]
VALUE2 = {{ thermo.temperature_kelvin[1] }}  ! Final temperature [K]
/
{% endif %}
{% endblock heating %}
